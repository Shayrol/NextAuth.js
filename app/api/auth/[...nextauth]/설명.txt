/app/api/auth/[...nextauth]/route.ts

✨✨ CredentialsProvider를 통한 로그인 
  - 백엔드 서버에서 accessToken, refreshToken 주는 경우


🎈 NextAuth 로그인(CredentialsProvider)
providers: [
  CredentialsProvider({
    async authorize(credentials) {
      // 백엔드 로그인 API 호출
      const response = await fetch('YOUR_LOGIN_API', {
        method: 'POST',
        body: JSON.stringify(credentials)
      });
      
      const data = await response.json();
      
      // 백엔드에서 받은 데이터
      if (data.accessToken) {
        return {
          id: data.id,
          email: data.email,
          accessToken: data.accessToken,
          refreshToken: data.refreshToken
        };
      }
      return null;
    }
  })
]

1-1. authorize()를 통해 로그인 API 요청을 한다. 여기서 body는 입력한 아이디, 비번을 넘겨준다.
1-2. 로그인을 통해 user 정보를 받아오면 json 형식으로 data 변수에 저장을 한다.
1-3. 그대로 data럴 return해도 좋고 필요한 데이터만 추출하고 싶으면 위와 같이 return 한다.


🎈 로그인 후 callbacks 실행
callbacks: {
  async jwt({ token, user }) {
    // 최초 로그인 시에만 user 데이터가 들어옵니다
    if (user) {
      // 백엔드에서 받은 토큰을 JWT 토큰에 포함
      token.accessToken = user.accessToken;
      token.refreshToken = user.refreshToken;
    }
    return token;
  },

  async session({ session, token }) {
    // 세션에 accessToken 포함
    session.accessToken = token.accessToken;
    return session;
  }
}

2-1. 이후 로그인이 끝나면 callbacks이 실행이 된다.
2-2. jwt 콜백을 통해 JWT 생성을 하는데 앞서 return한 data 값이 user에 들어간다.
2-3. 초기에는 token이 비어있으며, token에 accessToken, refreshToken를 추가해도 되고
     return {...token, ...user} 이렇게 user 값을 token에 덮어 씌워도 된다.
2-4. 그럼 해당 token이 session 콜백의 token인자로 들어간다.
2-5. 이는 쿠키 session에 저장 및 변경하는 과정이다.
2-6. session.accessToken에 저장한 token의 accessToken을 넣어 수정하고 return한다.
2-7. 여기서 session.accessToken이 안 잡히거나 또는 userSession()에서 accessToken이
     없는 경우가 있는데 이는 /types/next-auth.d.ts 파일을 생성을 하고 다음과 같이 한다.
      import NextAuth from "next-auth";

      declare module "next-auth" {
        interface Session {
          user: {
            id: number;
            name: string;
            email: string;
            accessToken: string;
          };
        }
      }


🎈 이후 session 활용 및 accessToken 사용

✨ Client Component
import { useSession } from "next-auth/react";

function MyComponent() {
  const { data: session } = useSession();

  const fetchData = async () => {
    const response = await fetch('YOUR_API_ENDPOINT', {
      headers: {
        'Authorization': `Bearer ${session?.accessToken}`
      }
    });
    // ...
  };
}

3-1. 클라이언트 컴포넌트의 사용 방법이다.
3-2. useSession()함수를 통해 쿠키에 저장된 session 값을 불러오고 accessToken이 필요한
     API에 headers에 토큰을 담아 요청을 한다.

✨ Server Component
import { getSession } from "next-auth/react";

async function getData() {
  const session = await getSession();
  const response = await fetch('YOUR_API_ENDPOINT', {
    headers: {
      'Authorization': `Bearer ${session?.accessToken}`
    }
  });
  // ...
}

4-1. 서버 컴포넌트의 사용 방법이다.
4-2. 서버인 경우는 getSession()을 통해 서버에서 session 정보를 불러올 수 있다.
4-3. session 데이터 받아오면 바로 headers에 accessToken을 담아 API 요청을 해서 가져온다.


✨✨ GoogleProvider를 통한 로그인 (Kakao, Naver ...)
  - 백엔드 서버에서 accessToken, refreshToken 주는 경우

🎈 NextAuth 로그인(GoogleProvider)
GoogleProvider({
  clientId: process.env.GOOGLE_ID,
  clientSecret: process.env.GOOGLE_SECRET,
  callbacks: {
    async signIn({ account, profile }) {
      // account에는 소셜 플랫폼의 access_token이 있습니다
      
      // 백엔드로 소셜 토큰 전달
      const response = await fetch('YOUR_BACKEND/social-login', {
        method: 'POST',
        body: JSON.stringify({
          provider: 'google',
          token: account.access_token,
          profile: profile
        })
      });

      const data = await response.json();
      // 백엔드에서 자체 accessToken을 발급받음
      account.backendAccessToken = data.accessToken;
      
      return true;
    }
  }
})

1-1. 소셜 로그인 구글 방법이다. 이는 소셜 로그인 후 백엔드 서버에서 accessToken을 줬을 때 이다.
1-2. 과정은 다음과 같다.
      - 자체 소셜 토큰 검증
      - 사용자 정보 저장/조회
      - 자체 accessToken 발급
1-3. 소셜 로그인 API에서 소셜 토큰과, profile의 정보를 넘겨 백엔드에서 자체 생성한
     accessToken을 발급을 받고 이후 똑같이 callbacks 실행하면 된다.
1-4. 여기서 profile은 소셜의 google이 주는 정보이여 다른 플랫폼 마다 차이가 있다.
      {
        sub: string          // Google의 고유 사용자 ID
        name: string         // 전체 이름
        given_name: string   // 이름
        family_name: string  // 성
        email: string        // 이메일 주소
        picture: string      // 프로필 사진 URL
        email_verified: boolean  // 이메일 인증 여부
        locale: string       // 사용자 언어 설정
      }



✨✨ 토큰 만료 시 refreshToken 실행 방법
callbacks: {
  async jwt({ token, user }) {
    // 최초 로그인 시
    if (user) {
      return {
        ...token,
        accessToken: user.accessToken,
        refreshToken: user.refreshToken,
        accessTokenExpires: Date.now() + user.expiresIn * 1000 // 예: 1시간
      }
    }

    // 토큰이 만료되지 않았다면 그대로 반환
    if (Date.now() < token.accessTokenExpires) {
      return token;
    }

    // 토큰이 만료되었다면 refreshToken으로 새로운 accessToken 발급
    try {
      const response = await fetch('YOUR_BACKEND/refresh', {
        method: 'POST',
        headers: {
          'Content-Type': 'application/json',
        },
        body: JSON.stringify({
          refreshToken: token.refreshToken
        })
      });

      const refreshedTokens = await response.json();

      if (!response.ok) {
        // refreshToken도 만료된 경우
        throw new Error("RefreshAccessTokenError");
      }

      return {
        ...token,
        accessToken: refreshedTokens.accessToken,
        refreshToken: refreshedTokens.refreshToken ?? token.refreshToken,
        accessTokenExpires: Date.now() + refreshedTokens.expiresIn * 1000
      }
    } catch (error) {
      // 에러 발생 시 로그아웃 처리가 필요할 수 있음
      return {
        ...token,
        error: "RefreshAccessTokenError"
      }
    }
  },

  async session({ session, token }) {
    session.accessToken = token.accessToken;
    session.error = token.error;
    return session;
  }
}

1-1. 기존에서 로그인 후 jwt 콜백에서 
     accessTokenExpires: Date.now() + user.expiresIn * 1000 을 추가로 token에 저장을 한다.
1-2. 조건을 통해 현재 시간과 accessTokenExpires의 시간을 비교를 하고 아직 만료가 되지 않으면
     기존 token을 사용을 하고 만료가 되면 refresh()함수를 실행을 한다.
1-3. 여기서 앞서 로그인을 하면서 refreshToken도 받은 값을 API 요청에 같이 넣어 받아오고
1-4. 기존 token에서 accessToken, refreshToken, accessTokenExpires 수정을 하고
     session 업데이트를 해준다.
     

백엔드에서 어떻게 동작을 하는지 자세히 모르지만 프론트에서 NextAuth를 사용하는 방법이다.
authOption을 통해 좀더 페이지에 대한 로그인 관리를 해줄 수 있다.

page router에서 토큰 관리를 _app.tsx 컴포넌트에서 서버 상태관리(ApolloClient)를 통해 저장 및
refreshToken 요청을 했으며 복잡함이 있다.

refreshToken 같은 경우는 프론트에서 설정할 거는 따로 없고 백엔드에서 httpOnly와 secure를
사용하여 쿠키에 저장을 해주고
프론트에서는 refreshToken 함수 요청 시 credentials: "include" 옵션으로 쿠키 포함해서
요청하면 된다.

const response = await fetch('/api/refresh-token', {
  method: 'POST',
  credentials: 'include', // 쿠키 포함
});

🎉 변경 전
const response = await fetch('YOUR_BACKEND/refresh', {
  method: 'POST',
  headers: {
    'Content-Type': 'application/json',
  },
  body: JSON.stringify({
    refreshToken: token.refreshToken
  })
});

🎉 변경 후
const response = await fetch('YOUR_BACKEND/refresh', {
  method: 'POST',
  credentials: 'include', // 쿠키 포함
  headers: {
    'Content-Type': 'application/json',
  },
});

refreshToken을 쿠키의 httpOnly와 secure를 통해 저장을 했다면 
쿠키 포함해서 요청을 하면 body의 refreshedTokens가 필요없고
API 요청에 쿠키 포함해서 전달해주는 credentials: "include", 옵션을 추가해주면 된다.

이렇게 하면 보안에 좋은 결과를 준다.