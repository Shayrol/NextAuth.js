DB: sqlite
ORM: Prisma
react: 19
next: 15

NextAuth을 통해 로그인을 구현

소셜로그인도 있지만 해당 프로젝트에서는 CredentialsProvider를 통해 회원가입으로 로그인을 구현
우선 해당 유저 정보를 저장할 DB와 코드간 쉽에 접근을 하기 위해 Prisma를 사용했음


1. NextAuth 셋팅
NextAuth을 전역에 사용을 하기 위해서 app/components/Providers.tsx 생성을 한다.
이는 SessionProvider(사용자 로그인 상태)를 layout.tsx에 직접적으로 사용하지 못한다.
이유는 해당 layout.tsx 컴포넌트는 SSR 형식으로 동작을 하는데 NextAuth의 SessionProvider는
서버에서 session에 접근을 하지 못해 에러가 발생한다.

이후 app/api/auth/[...nextauth]/route.ts 생성을 하는데 해당 로그인에 대한 처리를 담당한다.
(page router인 경우 파일 생성 다름)
여기서 NextAuth를 가져와 providers 즉 로그인 방식을 정하는데
CredentialsProvider로 회원가입을 통한 로그인으로 진행한다. (카카오, 네이버 등 지원함)

기본적으로 NextAuth에서 지원하는 로그인 페이지가 있다. (커스텀 로그인 페이지로 변경가능)
여기서 아이디, 비번 입력 후 로그인 버튼을 클릭을 하면 username과 password의 입력 값을 통해
authorize(credentials, req) 함수가 실행이 되는데 인자로 credentials에 입력 값이 들어간다.

const res = await fetch(`${process.env.NEXTAUTH_URL}/api/login`, {
  method: "POST",
  headers: {
    "Content-Type": "application/json",
  },
  body: JSON.stringify({
    username: credentials?.username,
    password: credentials?.password,
  }),
});

이렇게 authorize() 함수 내 첫 번째로 실행이 되는 함수다.
이는 해당 지정한 로그인 페이지로 이동을 하고 앞서 아이디, 비번 입력 값을 json() 형식의 값을
user 변수에 저장을 한다.

이때 다음과 같이 저장된다.
{
  username: "testID",
  password: "123",
}

이후 callbacks을 통해 위의 과정이 끝나면 실행이 되는데 이는 accessToken을 발급하여
해당 session에 user 정보에 추가하기 위함이다.

jwt({ token, user }) {
  return { ...token, ...user };
}
이렇게 jwt 함수가 있는데 이는 로그인을 하면 위해서 json 형식의 user의 값이 들어온다.
여기서 token은 값이 없어 null 인 상태이다.

이후 return으로 user의 값이 token으로 덮어씌워지고
아래 session() 함수의 인자 값에 들어간다.

session({ session, token }) {
  session.user = token as any;
  return session;
}
이렇게 session 함수가 있는데 token은 jwt 함수에서 반환된 token를 사용을 한다.
여기서 token은 현재 user의 값과 동일함

그리고 session으로 인자로 받는데 여기서는 세션 쿠키에 저장을 한다.

로그인 성공-

🎈 즉 파일 이동은 다음과 같다.
로그인 페이지 접속  ->  아이디, 비번 입력 후 버튼 클릭  ->  [...nextauth]의 route.ts 실행
->  authorize() 함수 실행  -> 해당 로그인 API 실행  ->  /api/login의 API 실행됨 
->  해당 입력 값(ID, PW)을 json() 형식으로 body에 저장  -> prisma를 통해 DB에 일치한 ID 확인
->  있으면 bcrypt로 암호화한 비번 대조 확인  ->  일치하면 PW를 제외한 정보를 user에 저장
->  accessToken을 발급  ->  새로운 객체 result에 user 정보와 뒤에 accessToken 값 저장
->  다시 [...nextauth]로 돌아와 callbacks 실행  -> jwt 함수 실행
->  jwt는 user(accessToken 있는) 값을 token에 덮어 씌워 다시 유저 정보 + accessToken을 합쳐 JWT 토큰 생성
->  session 함수에 token을 추가해 저장을 하고 로그인 성공
(<SessionProvider>를 통해 전역으로 useSession()을 통해 유저 정보 사용 가능)





Chat GPT 흐름 정리

1. 로그인 페이지에서 아이디와 비밀번호 입력
사용자가 로그인 폼에서 아이디(이메일)와 비밀번호를 입력하고 로그인 버튼을 클릭하면, 
NextAuth의 authorize 콜백이 실행됩니다.


2. authorize 함수 실행
authorize 함수 내에서, 입력된 사용자 정보(username, password)를 API로 보내는 fetch 요청을 통해 
/api/login 경로로 전송합니다.

여기서 요청을 보내는 URL은 환경 변수인 NEXTAUTH_URL을 사용하고, 
body에 입력된 사용자 정보를 담아 서버 측 API로 전송합니다.


3. /api/login 경로에서 로그인 처리
/api/login 경로에서 POST 요청을 받아 DB에서 사용자를 조회하고, 비밀번호를 bcrypt로 비교합니다.

사용자 정보가 DB에 있으면, 비밀번호를 비교하고 JWT 토큰을 생성하기 위한 
signJwtAccessToken 함수를 호출합니다.
비밀번호가 일치하면 accessToken을 생성하여 user 정보와 함께 반환합니다.
반환되는 result 객체에는 **accessToken**이 포함되어 있고, 이는 JWT로 생성된 토큰입니다.


4. authorize 콜백에서 받은 사용자 정보
authorize 콜백에서 서버에서 받은 응답은 JWT 토큰을 포함한 사용자 정보입니다. 
이 정보가 user 객체로 jwt 콜백 함수에 전달됩니다.


5. jwt 콜백에서 토큰 생성
jwt 콜백 함수에서는 user 객체를 받아서 JWT 토큰을 **토큰의 페이로드(payload)**로 설정합니다. 
이 과정에서 user 정보는 JWT 토큰의 페이로드로 덮어씌워집니다.

예를 들어, jwt 콜백에서는 user 객체에 포함된 accessToken이나 기타 정보를 token 객체에 추가하여 
반환합니다.


6. session 콜백에서 JWT 정보 세션에 저장
session 콜백에서는 jwt 콜백에서 반환된 token 객체를 세션에 저장합니다. 
이 때, token은 JWT에서 디코딩된 사용자 정보가 담겨 있으며, 이를 통해 클라이언트에서는 
세션 정보로 사용자의 인증 상태를 유지할 수 있습니다.


7. 전역에서 JWT 토큰 사용 가능
세션에 저장된 accessToken 정보는 전역에서 사용할 수 있게 됩니다. 
이제 React 컴포넌트에서 useSession() 훅을 사용하여 세션 정보를 가져올 수 있으며, 
session.user.accessToken으로 JWT 토큰을 사용할 수 있습니다.